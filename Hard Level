import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Student {
    private int studentID;
    private String name;
    private String department;
    private double marks;

    public int getStudentID() {
        return studentID;
    }

    public void setStudentID(int studentID) {
        this.studentID = studentID;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    public double getMarks() {
        return marks;
    }

    public void setMarks(double marks) {
        this.marks = marks;
    }
}

class StudentController {
    private Connection conn;

    public StudentController(Connection conn) {
        this.conn = conn;
    }

    public void createStudent(Student student) throws SQLException {
        String query = "INSERT INTO Student (Name, Department, Marks) VALUES (?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, student.getName());
            pstmt.setString(2, student.getDepartment());
            pstmt.setDouble(3, student.getMarks());
            pstmt.executeUpdate();
        }
    }

    public List<Student> getAllStudents() throws SQLException {
        List<Student> students = new ArrayList<>();
        String query = "SELECT * FROM Student";
        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                Student student = new Student();
                student.setStudentID(rs.getInt("StudentID"));
                student.setName(rs.getString("Name"));
                student.setDepartment(rs.getString("Department"));
                student.setMarks(rs.getDouble("Marks"));
                students.add(student);
            }
        }
        return students;
    }

    public void updateStudent(Student student) throws SQLException {
        String query = "UPDATE Student SET Name = ?, Department = ?, Marks = ? WHERE StudentID = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, student.getName());
            pstmt.setString(2, student.getDepartment());
            pstmt.setDouble(3, student.getMarks());
            pstmt.setInt(4, student.getStudentID());
            pstmt.executeUpdate();
        }
    }

    public void deleteStudent(int studentID) throws SQLException {
        String query = "DELETE FROM Student WHERE StudentID = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, studentID);
            pstmt.executeUpdate();
        }
    }
}

class StudentView {
    private StudentController controller;

    public StudentView(StudentController controller) {
        this.controller = controller;
    }

    public void showMenu() {
        Scanner scanner = new Scanner(System.in);
        int choice;
        do {
            System.out.println("\n1. Create Student");
            System.out.println("2. View All Students");
            System.out.println("3. Update Student");
            System.out.println("4. Delete Student");
            System.out.println("5. Exit");
            System.out.print("Enter choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1: createStudent(scanner); break;
                case 2: viewStudents(); break;
                case 3: updateStudent(scanner); break;
                case 4: deleteStudent(scanner); break;
                case 5: System.out.println("Exiting..."); break;
                default: System.out.println("Invalid choice, try again!"); break;
            }
        } while (choice != 5);
        scanner.close();
    }

    private void createStudent(Scanner scanner) {
        System.out.print("Enter Student Name: ");
        String name = scanner.next();
        System.out.print("Enter Department: ");
        String department = scanner.next();
        System.out.print("Enter Marks: ");
        double marks = scanner.nextDouble();
        
        Student student = new Student();
        student.setName(name);
        student.setDepartment(department);
        student.setMarks(marks);

        try {
            controller.createStudent(student);
            System.out.println("Student created successfully!");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void viewStudents() {
        try {
            List<Student> students = controller.getAllStudents();
            for (Student student : students) {
                System.out.println("ID: " + student.getStudentID() + ", Name: " + student.getName() + 
                                   ", Department: " + student.getDepartment() + ", Marks: " + student.getMarks());
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateStudent(Scanner scanner) {
        System.out.print("Enter Student ID to update: ");
        int studentID = scanner.nextInt();
        System.out.print("Enter New Name: ");
        String name = scanner.next();
        System.out.print("Enter New Department: ");
        String department = scanner.next();
        System.out.print("Enter New Marks: ");
        double marks = scanner.nextDouble();

        Student student = new Student();
        student.setStudentID(studentID);
        student.setName(name);
        student.setDepartment(department);
        student.setMarks(marks);

        try {
            controller.updateStudent(student);
            System.out.println("Student updated successfully!");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void deleteStudent(Scanner scanner) {
        System.out.print("Enter Student ID to delete: ");
        int studentID = scanner.nextInt();

        try {
            controller.deleteStudent(studentID);
            System.out.println("Student deleted successfully!");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

public class StudentManagementApp {
    public static void main(String[] args) {

        String url = "jdbc:mysql://localhost:3306/your_database_name";
        String user = "your_username";
        String password = "your_password";

        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            
            StudentController controller = new StudentController(conn);
            StudentView view = new StudentView(controller);

            view.showMenu();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
